// Generated by CoffeeScript 1.8.0
var concat, gulp;

gulp = require('gulp');

concat = require('gulp-concat');

gulp.task('default', ['js']);

gulp.task('js', function() {
  return gulp.src(['*.js', 'durandal/**/*.js']).pipe(concat('dist.js')).pipe(gulp.dest('./'));
});

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/href', [], function() {
    var chunks, domain, protocol, rootdomain, subdomain, url;
    chunks = window.location.href.split('://');
    protocol = chunks[0];
    chunks = chunks.slice(1).join('').split('/');
    domain = chunks[0];
    url = '/' + chunks.slice(1).join('/');
    chunks = domain.split('.');
    subdomain = chunks[0];
    rootdomain = chunks.slice(1).join('.');
    return {
      protocol: protocol,
      domain: domain,
      url: url,
      subdomain: subdomain,
      rootdomain: rootdomain
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/humanize', ['speakingurl'], function(speakingurl) {
    Humanize.slug = speakingurl;
    return Humanize;
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/inject', ['injectinto'], function(Inject) {
    return new Inject();
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('text!components/dialog.html', [], function() {
    return "<div class=\"modal-dialog animated\" data-bind=\"css: { shake: shouldShake }\">\n	<!-- ko compose: composeOptions --><!-- /ko -->\n</div>";
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define('components/dialog', ['knockout', 'jquery', 'plugins/dialog'], function(ko, $, dialog) {
    var Dialog;
    return Dialog = (function() {
      function Dialog(options) {
        this.shake = __bind(this.shake, this);
        this.close = __bind(this.close, this);
        this.show = __bind(this.show, this);
        var activationData;
        this.composeOptions = ko.observable(null);
        this.shouldShake = ko.observable(false);
        activationData = {
          dialog: this,
          activationData: options.activationData
        };
        this.composeOptions({
          model: options.model,
          activationData: activationData
        });
      }

      Dialog.prototype.show = function() {
        return dialog.showOdoDialog(this);
      };

      Dialog.prototype.close = function(response) {
        return dialog.close(this, response);
      };

      Dialog.prototype.shake = function() {
        this.shouldShake(true);
        return setTimeout((function(_this) {
          return function() {
            return _this.shouldShake(false);
          };
        })(this), 1000);
      };

      return Dialog;

    })();
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('text!components/wizard.html', [], function() {
    return '<div class="wizard" data-bind="compose: composeOptions"></div>';
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define('components/wizard', ['knockout'], function(ko) {
    var Wizard;
    return Wizard = (function() {
      function Wizard() {
        this.back = __bind(this.back, this);
        this.forward = __bind(this.forward, this);
        this.activate = __bind(this.activate, this);
        this.composeOptions = ko.observable({
          model: '',
          activationData: {
            wizard: this,
            activationData: null
          }
        });
      }

      Wizard.prototype.activate = function(options) {
        this.dialog = options.dialog;
        return this.composeOptions({
          model: options.model,
          activationData: {
            dialog: this.dialog,
            wizard: this,
            activationData: options.activationData
          }
        });
      };

      Wizard.prototype.forward = function(options) {
        return (function(_this) {
          return function() {
            return _this.composeOptions({
              model: options.model,
              transition: 'forward',
              activationData: {
                dialog: _this.dialog,
                wizard: _this,
                activationData: options.activationData
              }
            });
          };
        })(this);
      };

      Wizard.prototype.back = function(options) {
        return (function(_this) {
          return function() {
            return _this.composeOptions({
              model: options.model,
              transition: 'back',
              activationData: {
                dialog: _this.dialog,
                wizard: _this,
                activationData: options.activationData
              }
            });
          };
        })(this);
      };

      return Wizard;

    })();
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/bootstrap', ['knockout', 'jquery'], function(ko, $) {
    return ko.bindingHandlers.popover = {
      init: function(element, valueAccessor) {
        var options;
        options = ko.unwrap(valueAccessor());
        return $(element).popover(options);
      }
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/dialog', ['knockout', 'jquery', 'plugins/dialog', 'plugins/router'], function(ko, $, dialog, router) {
    return dialog.addContext('OdoDialog', {
      compositionComplete: function(child, parent, context) {
        var $child, $host, options, theDialog;
        $child = $(child);
        options = {
          backdrop: 'static'
        };
        theDialog = dialog.getDialog(context.model);
        $host = $(theDialog.host);
        $host.modal(options);
        $('body').scrollTop(0);
        $host.one('shown.bs.modal', function() {
          return $child.find('[autofocus],.autofocus').first().focus();
        });
        if ($child.hasClass('autoclose')) {
          return $host.one('shown.bs.modal', function() {
            return $host.one('click.dismiss.modal', function() {
              return theDialog.close();
            });
          });
        }
      },
      addHost: function(theDialog) {
        var body, host;
        body = $('body');
        host = $('<div class="modal fade" id="odo-modal" tabindex="-1" role="dialog" aria-hidden="true">').appendTo(body);
        theDialog.host = host.get(0);
        if (router.disable != null) {
          return router.disable();
        }
      },
      removeHost: function(theDialog) {
        return $(theDialog.host).one('hidden.bs.modal', function() {
          ko.removeNode(theDialog.host);
          if (router.enable != null) {
            return router.enable();
          }
        }).modal('hide');
      }
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/marked', ['knockout', 'marked'], function(ko, marked) {
    return ko.bindingHandlers.marked = {
      init: function() {
        return {
          'controlsDescendantBindings': true
        };
      },
      update: function(element, valueAccessor) {
        return ko.utils.setHtml(element, marked(ko.utils.unwrapObservable(valueAccessor())));
      }
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/mousetrap', ['knockout', 'jquery', 'mousetrap'], function(ko, $, Mousetrap) {
    Mousetrap = (function(Mousetrap) {
      var _originalBind;
      _originalBind = Mousetrap.bind;
      Mousetrap.bind = function(keys, originalCallback, action) {
        var callback, handle, isBound;
        isBound = true;
        handle = {
          unbind: function() {
            return isBound = false;
          },
          bind: function() {
            return isBound = true;
          }
        };
        callback = function() {
          if (!isBound) {
            return;
          }
          return originalCallback.apply(this, arguments);
        };
        _originalBind(keys, callback, action);
        return handle;
      };
      return Mousetrap;
    })(Mousetrap);
    Mousetrap.stopCallback = function(e, element, combo) {
      var $element;
      $element = $(element);
      if ($element.hasClass('mousetrap-yes')) {
        return false;
      }
      if ($element.hasClass('mousetrap-yes-' + combo)) {
        return false;
      }
      return element.tagName === 'INPUT' || element.tagName === 'SELECT' || element.tagName === 'TEXTAREA' || (element.contentEditable && element.contentEditable === 'true');
    };
    return ko.bindingHandlers.shortcuts = {
      init: function(element, valueAccessor) {
        var handler, handles, key, shortcuts, wrap;
        wrap = function(handler, key) {
          return function() {
            handler(key);
            return false;
          };
        };
        shortcuts = ko.unwrap(valueAccessor());
        handles = [];
        for (key in shortcuts) {
          handler = shortcuts[key];
          handles.push(Mousetrap.bind(key, wrap(handler, key)));
        }
        return ko.utils.domNodeDisposal.addDisposeCallback(element, function() {
          var handle, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = handles.length; _i < _len; _i++) {
            handle = handles[_i];
            _results.push(handle.unbind());
          }
          return _results;
        });
      }
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/q', ['durandal/system', 'q'], function(system, Q) {
    var originalDefine, originalSetModuleId;
    system.defer = function(action) {
      var dfd, promise;
      dfd = Q.defer();
      action.call(dfd, dfd);
      promise = dfd.promise;
      dfd.promise = function() {
        return promise;
      };
      return dfd;
    };
    window.requireQ = function(deps) {
      var dfd;
      dfd = Q.defer();
      requirejs(deps, function() {
        return dfd.resolve(arguments);
      });
      return dfd.promise;
    };
    originalDefine = window.define;
    window.define = function(name, deps, callback) {
      var args, d, method;
      method = function(cb) {
        return function() {
          var arg, args, dfd, foundPromise, that, _i, _len;
          args = Array.prototype.slice.call(arguments, 0);
          foundPromise = false;
          for (_i = 0, _len = args.length; _i < _len; _i++) {
            arg = args[_i];
            foundPromise = foundPromise || arg && (arg.then != null);
          }
          if (typeof cb !== 'function') {
            return cb;
          }
          if (!foundPromise) {
            return cb.apply(this, args);
          }
          dfd = Q.defer();
          that = this;
          Q.all(args).then(function(resolved) {
            return dfd.resolve(cb.apply(that, resolved));
          });
          return dfd.promise;
        };
      };
      if (typeof name !== 'string') {
        if (system.isArray(name)) {
          args = [name, method(deps)];
        } else {
          args = [method(name)];
        }
      } else if (!system.isArray(deps)) {
        d = ['require', 'exports', 'module'];
        if (deps.length === 1) {
          d = ['require'];
        }
        args = [name, d, method(deps)];
      } else {
        args = [name, deps, method(callback)];
      }
      return originalDefine.apply(this, args);
    };
    window.define.amd = {
      jQuery: true
    };
    system.acquire = function() {
      var arrayRequest, deps, dfd, first;
      deps = void 0;
      first = arguments[0];
      arrayRequest = false;
      if (system.isArray(first)) {
        deps = first;
        arrayRequest = true;
      } else {
        deps = Array.prototype.slice.call(arguments, 0);
      }
      dfd = Q.defer();
      requirejs(deps, function() {
        return Q.spread(arguments, function() {
          var args;
          args = arguments;
          return setTimeout((function() {
            if (args.length > 1 || arrayRequest) {
              return dfd.resolve(Array.prototype.slice.call(args, 0));
            } else {
              return dfd.resolve(args[0]);
            }
          }), 1);
        });
      });
      return dfd.promise;
    };
    originalSetModuleId = system.setModuleId;
    return system.setModuleId = function(obj, id) {
      if (system.isPromise(obj)) {
        obj.then(function(newObj) {
          return originalSetModuleId(newObj, id);
        });
        return;
      }
      return originalSetModuleId(obj, id);
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/router', ['knockout', 'plugins/router', 'durandal/app'], function(ko, router, app) {
    var isRouterEnabled, oldNavigate, subscription;
    subscription = null;
    router.updateDocumentTitle = function(instance, instruction) {
      var update;
      if (subscription != null) {
        subscription.dispose();
        subscription = null;
      }
      update = function() {
        var parts;
        parts = [];
        if (instance.title != null) {
          parts.push(ko.unwrap(instance.title));
        }
        if (instruction.config.title != null) {
          parts.push(instruction.config.title);
        }
        if (app.title != null) {
          parts.push(app.title);
        }
        parts = parts.filter(function(part) {
          return part !== '';
        });
        return document.title = parts.join(' - ');
      };
      update();
      if ((instance.title != null) && ko.isObservable(instance.title)) {
        return subscription = instance.title.subscribe(function() {
          return update();
        });
      }
    };
    isRouterEnabled = true;
    router.disable = function() {
      return isRouterEnabled = false;
    };
    router.enable = function() {
      return isRouterEnabled = true;
    };
    router.currentInstruction = null;
    router.guardRoute = function(instance, instruction) {
      if ((router.currentInstruction != null) && !isRouterEnabled) {
        return router.currentInstruction.fragment;
      }
      router.currentInstruction = instruction;
      return true;
    };
    oldNavigate = router.navigate;
    router.currentTransition = null;
    router.transition = function(fragment, transition) {
      router.currentTransition = transition;
      return oldNavigate(fragment);
    };
    return router.on('router:navigation:composition-complete', function() {
      return router.currentTransition = null;
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/validation', ['knockout', 'ko.validation'], function(ko) {
    return ko.validation.configure({
      registerExtenders: true,
      parseInputAttributes: true,
      insertMessages: false,
      errorMessageClass: 'help-block',
      errorElementClass: 'has-error'
    });
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('odo/durandal/plugins/viewLocator', ['durandal/viewLocator'], function(locator) {
    return locator.useConvention('views');
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  define('odo/durandal/plugins/widget', ['plugins/widget'], function(widget) {
    widget.convertKindToModulePath = function(kind) {
      if (__indexOf.call(kind, '/') >= 0) {
        return kind;
      }
      return "local/widgets/" + kind;
    };
    return widget.convertKindToViewPath = function(kind) {
      if (__indexOf.call(kind, '/') >= 0) {
        return kind;
      }
      return "local/widgets/" + kind;
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('transitions/back', ['durandal/system', 'transitions/velocity'], function(system, Velocity) {
    return function(context) {
      system.extend(context, {
        inAnimation: 'slideInLeft',
        outAnimation: 'slideOutRight'
      });
      return new Velocity().create(context);
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('transitions/dynamic', ['plugins/router', 'q'], function(router, Q) {
    return function(context) {
      var dfd, view;
      dfd = Q.defer();
      if (router.currentTransition != null) {
        requirejs(['transitions/' + router.currentTransition], function(transition) {
          return transition(context).then(function() {
            return dfd.resolve();
          });
        });
      } else {
        if (context.scrolltop == null) {
          context.scrolltop = true;
        }
        if (context.activeView != null) {
          $(context.activeView).hide();
        }
        if (context.child != null) {
          context.triggerAttach();
          view = $(context.child).show();
          if ((context.scrolltop != null) && $(window).scrollTop() > view.offset().top) {
            $('html, body').css({
              scrollTop: view.offset().top
            });
          }
          view.find('[autofocus],.autofocus').first().focus();
        }
        dfd.resolve();
      }
      return dfd.promise;
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  define('transitions/forward', ['durandal/system', 'transitions/velocity'], function(system, Velocity) {
    return function(context) {
      system.extend(context, {
        inAnimation: 'slideInRight',
        outAnimation: 'slideOutLeft'
      });
      return new Velocity().create(context);
    };
  });

}).call(this);

// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define('transitions/velocity', ['durandal/system', 'jquery', 'q', 'velocity'], function(system, $, Q) {
    var Velocity;
    return Velocity = (function() {
      function Velocity() {
        this.inTransition = __bind(this.inTransition, this);
        this.outTransition = __bind(this.outTransition, this);
        this.endTransition = __bind(this.endTransition, this);
        this.startTransition = __bind(this.startTransition, this);
        this.create = __bind(this.create, this);
      }

      Velocity.prototype.animations = {
        slideInRight: {
          translateX: ['0px', '2000px']
        },
        slideInLeft: {
          translateX: ['0px', '-2000px']
        },
        slideOutRight: {
          translateX: ['2000px', '0px']
        },
        slideOutLeft: {
          translateX: ['-2000px', '0px']
        }
      };

      Velocity.prototype.create = function(settings) {
        this.settings = settings;
        this.deferred = Q.defer();
        if (this.settings.scrolltop == null) {
          this.settings.scrolltop = true;
        }
        if (this.settings.child) {
          this.startTransition();
        } else {
          this.endTransition();
        }
        return this.deferred.promise;
      };

      Velocity.prototype.startTransition = function() {
        if (this.settings.activeView != null) {
          return this.outTransition();
        } else {
          return this.inTransition();
        }
      };

      Velocity.prototype.endTransition = function() {
        return this.deferred.resolve();
      };

      Velocity.prototype.outTransition = function() {
        var $previousView;
        $previousView = $(this.settings.activeView);
        $previousView.addClass('transition');
        $previousView.css('display', 'none');
        return $previousView.velocity(this.animations[this.settings.outAnimation], 300, (function(_this) {
          return function() {
            $previousView.removeClass('transition');
            $previousView.hide();
            _this.inTransition();
            return _this.endTransition();
          };
        })(this));
      };

      Velocity.prototype.inTransition = function() {
        var $newView;
        this.settings.triggerAttach();
        $newView = $(this.settings.child);
        $newView.addClass('transition');
        $newView.velocity(this.animations[this.settings.inAnimation], 300, (function(_this) {
          return function() {
            $newView.css('-webkit-transform', '');
            $newView.css('-moz-transform', '');
            $newView.css('-ms-transform', '');
            $newView.css('transform', '');
            $newView.removeClass('transition');
            _this.endTransition();
            return $newView.find('[autofocus],.autofocus').first().focus();
          };
        })(this));
        if ((this.settings.scrolltop != null) && $(window).scrollTop() > $newView.offset().top) {
          return $('html, body').velocity({
            scrollTop: $newView.offset().top
          }, 300);
        }
      };

      return Velocity;

    })();
  });

}).call(this);
